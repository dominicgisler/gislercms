{% import "admin/forms.twig" as forms %}

{% extends 'admin/content.twig' %}

{% block title %}{% if module.new %}Neues Modul erstellen{% else %}Modul bearbeiten{% endif %}{% endblock %}

{%
    set messages = {
        invalid_input: {
            class: 'danger',
            message: 'Es sind Fehler aufgetreten, bitte prüfe deine Eingaben.'
        },
        save_error: {
            class: 'danger',
            message: 'Beim Speichern ist ein Fehler aufgetreten, bitte prüfe deine Eingaben oder versuche es später erneut.'
        },
        save_success: {
            class: 'success',
            message: 'Das Modul wurde erfolgreich gespeichert.'
        },
        delete_success: {
            class: 'success',
            message: 'Das Modul wurde erfolgreich gelöscht.'
        },
        delete_error: {
            class: 'danger',
            message: 'Beim Löschen ist ein Fehler aufgetreten, bitte versuche es später erneut.'
        }
    }
%}

{% set contSelect = [] %}
{% for cont, desc in controllers %}
    {% set selected = false %}
    {% if cont == module.controller %}
        {% set selected = true %}
    {% endif %}
    {% set contSelect = contSelect|merge([{value: cont, label: cont|replace({'ModuleController': '', 'Controller': ''}), selected: selected}]) %}
{% endfor %}

{% block content %}
    {% if message %}
        <div class="alert alert-{{ messages[message].class }} alert-dismissible fade show" role="alert">
            {{ messages[message].message|raw }}
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    {% endif %}
    <form method="post" id="page-form">
        {{ forms.form_group('text', 'name', module.name, 'Name', '', 'name' in errors ? 'is-invalid' : '', 'Interne Bezeichnung des Modules') }}
        {{ forms.form_group('select', 'controller', module.controller, 'Typ', '', 'controller' in errors ? 'is-invalid' : '', '', contSelect) }}
        {{ forms.form_group('json', 'config', module.config, 'Konfiguration', '', 'config' in errors ? 'is-invalid' : '') }}
        <a href="#" onclick="return insertModuleConfig();">Beispiel-Konfiguration einfügen</a>
        <div class="text-right mb-4">
            <button class="btn btn-danger" type="button" data-toggle="modal" data-target="#confirmDelete">Löschen</button>
            <button class="btn btn-primary" name="save">Speichern</button>
        </div>

        {# confirm delete modal #}
        <div class="modal fade" id="confirmDelete" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmDeleteLabel">Modul löschen</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        Möchtest du dieses Modul wirklich unwiderruflich löschen?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Abbrechen</button>
                        <button type="submit" name="delete" class="btn btn-danger">Ja, Modul löschen</button>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <script>
        function insertModuleConfig() {
            var desc = {
                {% for cont, desc in controllers %}'{{ cont }}': `{{ desc|raw }}`,{% endfor %}
            };
            $('#input_config').val(desc[$('#input_controller').val()]);
            return false;
        }
    </script>
{% endblock %}